//////////////////////////////////////////////////

//================ EXT. STL ================
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>
using namespace __gnu_pbds;

/* ordered set*/ (multi)
template <class T, class cmp = less_equal<T>> using ordered_set = tree<T, null_type, cmp, rb_tree_tag, tree_order_statistics_node_update>;
// st.erase(s.upper_bound(value))  O(log n) erase the exact value from st
// st.find(value);	O(log n)	Finds an element and returns an iterator.
// st.find_by_order(k);	O(log n)	Finds the k-th smallest element (0-based).
// st.order_of_key(value);	O(log n)	Returns number of elements strictly smaller than value.

/* ordered map*/
template <class key, class value, class cmp = less_equal<key>> using ordered_map = tree<key, value, cmp, rb_tree_tag, tree_order_statistics_node_update>;
// find_by_order(k)  returns iterator to kth element starting from 0;
// order_of_key(k) returns count of elements strictly smaller than k;

template <typename T> using PQ = priority_queue<T>;
template <typename T> using QP = priority_queue<T,vector<T>,greater<T>>;
template <typename T> using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;// ordered_set<ll> st;st.order_of_key(x); // number of elements < x // *(st.find_by_order(x))  (x)th largest element
template <typename T> using ordered_multiset = tree<T, null_type,less_equal<T>, rb_tree_tag,tree_order_statistics_node_update>;
template <typename T,typename R> using ordered_map = tree<T, R , less<T>, rb_tree_tag, tree_order_statistics_node_update>;
template <typename T,typename R> using ordered_multimap = tree<T, R , less_equal<T>, rb_tree_tag, tree_order_statistics_node_update>;

//////////////////////////////////////////////////

memset(vcetor/array, 0/1, sizeof(vector/array));
* a+b = a^b + 2*a&b;
* a+b = a|b + a&b;
* OR/AND/XOR are associative and commutative.
* A ^ 0 = A 
* if A^B = C, then A^C = B
"#define getunique(v){sort(v.begin(), v.end());v.erase(unique(v.begin(), v.end()), v.end());}",
* https://oeis.org/ Sequence Related Problem Analysis

int dx[] = {1, 0, -1, 0};
int dy[] = {0, 1, 0, -1};
char dir[] = {'D', 'R', 'U', 'L'};

//////////////////////////////////////////////////

manually lower bound and upper bound:
 
int lower_bound(vector<int>& arr, int N, int val)
{
    ll mid, low = 0, high = N;
    while (low < high) {
        mid = low + (high - low) / 2;
        if (val <= arr[mid])
            high = mid;
        else
            low = mid + 1;
    }
    // if val is greater than arr[n-1]
    if(low < N && arr[low] < val) low++;
    return low;
}
 
int upper_bound(vector<int>& arr, int N, int val)
{
    ll mid, low = 0, high = N;
    while (low < high) {
        mid = low + (high - low) / 2;
        if (val >= arr[mid]) 
            low = mid + 1;
        else
            high = mid;
    }
    if(low < N && arr[low] <= val) low++; 
    return low;
}

//////////////////////////////////////////////////

Lamda function:
auto function_name = [&](parameters) -> data_type
{
    function body;
};

//////////////////////////////////////////////////

bool cmp(const pair<int,int> & p1,const pair<int,int> & p2)
{
    if(p1.ss>p2.ss) return 1;
    return 0;
}

//============================================== Bits
#define Set(x, k) (x |= (1LL << k))
#define Unset(x, k) (x &= ~(1LL << k))
#define Check(x, k) (x & (1LL << k))
#define Toggle(x, k) (x ^= (1LL << k))
int popcount(ll x){return __builtin_popcountll(x);};
int poplow(ll x){return __builtin_ctzll(x);};
int pophigh(ll x){return 63 - __builtin_clzll(x);};

//>>Convert
string decToBinary(int n){string s="";int i = 0;while (n > 0) {s =to_string(n % 2)+s;n = n / 2;i++;}return s;}
ll binaryToDecimal(string n){
    string num = n;ll dec_value = 0;
    int base = 1;int len = num.length();
    for(int i = len - 1; i >= 0; i--){
        if (num[i] == '1')dec_value += base;
        base = base * 2;
    }
    return dec_value;
}
//==============================================

//////////////////////////////////////////////////
################## MOD ####################
ll mod_pow(ll b, ll n) {
    b %= mod;
    if (n < 0) n = mod - 2; // For modular inverse
    ll ans = 1;
    while (n) {
        if (n & 1) ans = ans * b % mod;
        n >>= 1;
        b = b * b % mod;
    }
    return ans;
}
ll mod_mul(ll a, ll b) {
    return (a % mod * b % mod) % mod;
}
ll mod_inv(ll n) {
    return mod_pow(n, mod - 2);
}
ll mod_div(ll a, ll b) {
    return mod_mul(a, mod_inv(b));
}

//////////////////////////////////////////////////

long long nCr(int n, int r){
    if(r>n || r<0) return 0;
    if(r==n || r==0) return 1;
    ll sum = 1LL;
    for(int i = 1; i <= r; i++){
        sum = (sum * (n - r + i) / i) % mod;
    }
    return sum % mod;
}

ll npr(int n, int r) {
    if (r < 0 || r > n) return 0;
    ll result = 1;
    for (int i = 0; i < r; i++) {
        result = mod_mul(result, n - i); // Multiply (n - i) % mod
    }
    return result;
}


other process: it is precomputing and more accurate: 
vector<ll> fact(n);
/* in the main function
    fact[0] = 1;
    for(int i=1; i<=N; i++) fact[i] = mod_mul(fact[i-1],i);
*/
ll ncr(int n, int r) {
    if(r<0 || r>n) return 0;
    return mod_div(fact[n],mod_mul(fact[r],fact[n-r]));
}
//////////////////////////////////////////////////

bool isP(int n) {
    if(n==2 || n==3)return true;
    else if(n<=1 || n%2==0 || n%3==0) return false;
    for(int i=5;i*i<=n;i+=6) {
        if(n%i==0 || n%(i+2)==0) return false;
    }
    return true;
}

/*--------------- Seive -----------------------*/
//////////////////////////////////////////////////

bool pr[N];
vector<int> prime;
void sieve(ll n)
{
    memset(pr,true ,sizeof(pr));
    for(ll p=2;p*p<=n;p++)
    {
        if(pr[p]==1)
        {
            for(int i=p*p;i<=n;i+=p)
            {
                pr[i]=false;
            }
        }
    }
   for(int i=2;i<=n;i++) if(pr[i]==true) prime.push_back(i);
}
//////////////////////////////////////////////////

vector<int>spf(100001,-1);
void fillSpf(){
    for(int i = 2; i <= 100000; i++){
        if(spf[i] == -1){
            for(int j = i*i; j <= 100000; j+= i)  {
                if (spf[j] == -1)    spf[j] = i;
            }
        }
    }
}

////////////////////////////////////////////////////
// Get All The Divisors Of That Number
vector<ll> getdiv(ll n)
{
    vector<ll> ans;
    for (ll i = 2; i * i <= n; i++)
    {
        if (n % i == 0)
        {
            ans.push_back(i);
            if (n / i != i)
                ans.push_back(n / i);
        }
    }
    return ans;
}

////////////////////////////////////////////////////
// to get the prime factors of that number
vector<int> getprimefac(int n)
{
    vector<int> ans;
    int nn = n;
    for (int i = 2; i * i <= n; i++)
    {
        if (nn % i == 0)
        {
            ans.pb(i);
            while (nn % i == 0)
            {
                nn /= i;
            }
        }
    }
    if (nn > 1)
    {
        ans.pb(nn);
    }
    return ans;
}


////////////////////////////////////////////////////
***************** Kahn's Algorithm ****************
// Function to perform topological sort using Kahn's Algorithm

void topologicalSortKahns(int V, vector<vector<int>>& adj) {
    vector<int> inDegree(V, 0);
    
    // Calculate in-degrees of all vertices
    for (int u = 0; u < V; u++) {
        for (int v : adj[u]) {
            inDegree[v]++;
        }
    }

    // Queue to store vertices with in-degree 0
    queue<int> q;
    for (int i = 0; i < V; i++) {
        if (inDegree[i] == 0) {
            q.push(i);
        }
    }

    vector<int> topoSort;
    while (!q.empty()) {
        int node = q.front();
        q.pop();
        topoSort.push_back(node);

        // Reduce in-degree for adjacent vertices and push to queue if in-degree becomes 0
        for (int v : adj[node]) {
            inDegree[v]--;
            if (inDegree[v] == 0) {
                q.push(v);
            }
        }
    }

    // Check if a valid topological sort exists
    if (topoSort.size() != V) {
        cout << "Cycle detected, topological sort not possible" << endl;
    } else {
        cout << "Topological Sort (Kahn's Algorithm): ";
        for (int node : topoSort) {
            cout << node << " ";
        }
        cout << endl;
    }
}

///////////////////////////////////////////////////////////

======================= Disjoint set =======================
// directly can say whether the node is connected to the other node.

class DisjointSet {
public:
    vector<int> size, parent;
    DisjointSet(int n) {
        parent.resize(n+1, 0);
        size.resize(n+1);
        for(int i =0;i<=n;i++) {
            parent[i] = i;
            size[i] = 1;
        }
    }
    int findUPar(int node) {
        if(node == parent[node]) return node;
        return parent[node] = findUPar(parent[node]);
    }
    void unionBySize(int u, int v) {
        int ulp_u = findUPar(u);
        int ulp_v = findUPar(v);
        if(ulp_u == ulp_v) return;
        if(size(ulp_u) < size(ulp_v)) {
            parent[ulp_u] = ulp_v;
            size[ulp_v] += size[ulp_u];
        }
        else {
            parent[ulp_v] = ulp_u;
            size[ulp_u] += size[ulp_v];
        }
    }
};

//////////////////////////////////////////////////////////
**************** string hashing functions ****************
ll get_hash(string &s) {
    ll val = 0;
    for(auto &it:s) {
        val = (val * 31 + (it - 'a' + 1)) % mod; // mod = 1e9 + 7;
    }
    return val;
}